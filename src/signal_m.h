#ifndef _SIGNAL_M_H_
#define _SIGNAL_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/signal.msg</tt> by opp_msgc.
 * <pre>
 * packet Signal {
 *    unsigned int source=0;
 *     unsigned int destination=0;
 *     unsigned  int mtype=0;
 *     long value=0;
 *     unsigned int value2=0;
 * }
 * </pre>
 */
class Signal : public ::cPacket
{
  protected:
    unsigned int source_var;
    unsigned int destination_var;
    unsigned int mtype_var;
    long value_var;
    unsigned int value2_var;

  private:
    void copy(const Signal& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Signal&);

  public:
    Signal(const char *name=NULL, int kind=0);
    Signal(const Signal& other);
    virtual ~Signal();
    Signal& operator=(const Signal& other);
    virtual Signal *dup() const {return new Signal(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getSource() const;
    virtual void setSource(unsigned int source);
    virtual unsigned int getDestination() const;
    virtual void setDestination(unsigned int destination);
    virtual unsigned int getMtype() const;
    virtual void setMtype(unsigned int mtype);
    virtual long getValue() const;
    virtual void setValue(long value);
    virtual unsigned int getValue2() const;
    virtual void setValue2(unsigned int value2);
};

inline void doPacking(cCommBuffer *b, Signal& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Signal& obj) {obj.parsimUnpack(b);}


#endif // _SIGNAL_M_H_
