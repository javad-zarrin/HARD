//
// Generated file, do not edit! Created by opp_msgc 4.2 from src/rd_message.msg.
//

#ifndef _RD_MESSAGE_M_H_
#define _RD_MESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "query.h"
    #include <vector>
    #include <string>
// }}



/**
 * Class generated from <tt>src/rd_message.msg</tt> by opp_msgc.
 * <pre>
 * message rdMessage
 * {
 *    unsigned int ID=0; 
 *    bool flag=true;
 *     int source=0;
 *     int destination=0;
 *     int hopCount = 0;
 *     int mtype=0;
 *     int intContent=0;
 *     int intContentSD=0;
 *     int intValue=0;
 *   
 *   	strtype mainContent=DEFULT_STC;
 *   	strtype stringContent=DEFULT_STC;
 *  
 *   
 * }
 * </pre>
 */
class rdMessage : public ::cMessage
{
  protected:
    unsigned int ID_var;
    bool flag_var;
    int source_var;
    int destination_var;
    int hopCount_var;
    int mtype_var;
    int intContent_var;
    int intContentSD_var;
    int intValue_var;
    strtype mainContent_var;
    strtype stringContent_var;

  private:
    void copy(const rdMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const rdMessage&);

  public:
    rdMessage(const char *name=NULL, int kind=0);
    rdMessage(const rdMessage& other);
    virtual ~rdMessage();
    rdMessage& operator=(const rdMessage& other);
    virtual rdMessage *dup() const {return new rdMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getID() const;
    virtual void setID(unsigned int ID);
    virtual bool getFlag() const;
    virtual void setFlag(bool flag);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getMtype() const;
    virtual void setMtype(int mtype);
    virtual int getIntContent() const;
    virtual void setIntContent(int intContent);
    virtual int getIntContentSD() const;
    virtual void setIntContentSD(int intContentSD);
    virtual int getIntValue() const;
    virtual void setIntValue(int intValue);
    virtual strtype& getMainContent();
    virtual const strtype& getMainContent() const {return const_cast<rdMessage*>(this)->getMainContent();}
    virtual void setMainContent(const strtype& mainContent);
    virtual strtype& getStringContent();
    virtual const strtype& getStringContent() const {return const_cast<rdMessage*>(this)->getStringContent();}
    virtual void setStringContent(const strtype& stringContent);
};

inline void doPacking(cCommBuffer *b, rdMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, rdMessage& obj) {obj.parsimUnpack(b);}


#endif // _RD_MESSAGE_M_H_
